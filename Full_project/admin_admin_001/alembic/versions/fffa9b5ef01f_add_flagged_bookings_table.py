"""add flagged_bookings table

Revision ID: fffa9b5ef01f
Revises: fc499248b809
Create Date: 2025-10-03 22:19:09.221018

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fffa9b5ef01f'
down_revision: Union[str, Sequence[str], None] = 'fc499248b809'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_analytics_view_id'), table_name='analytics_view')
    op.drop_table('analytics_view')
    op.drop_index(op.f('ix_flagged_transactions_id'), table_name='flagged_transactions')
    op.drop_table('flagged_transactions')
    op.add_column('bookings', sa.Column('status', sa.String(), nullable=True))
    op.alter_column('bookings', 'provider_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_bookings_booking_id'), table_name='bookings')
    op.drop_column('bookings', 'service_details')
    op.alter_column('flagged_bookings', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('flagged_bookings', 'provider_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('flagged_bookings', 'reason',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('flagged_bookings', 'status',
               existing_type=postgresql.ENUM('pending', 'reviewed', 'resolved', name='flagstatus'),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('flagged_bookings', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('flagged_bookings', 'resolved_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('ix_flagged_bookings_id'), table_name='flagged_bookings')
    op.drop_constraint(op.f('flagged_bookings_booking_id_fkey'), 'flagged_bookings', type_='foreignkey')
    # Fix NULL values first
    op.execute("UPDATE providers SET status = 'active' WHERE status IS NULL")

    op.alter_column('providers', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('providers', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_foreign_key(op.f('flagged_bookings_booking_id_fkey'), 'flagged_bookings', 'bookings', ['booking_id'], ['booking_id'])
    op.create_index(op.f('ix_flagged_bookings_id'), 'flagged_bookings', ['id'], unique=False)
    op.alter_column('flagged_bookings', 'resolved_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('flagged_bookings', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('flagged_bookings', 'status',
               existing_type=sa.String(),
               type_=postgresql.ENUM('pending', 'reviewed', 'resolved', name='flagstatus'),
               existing_nullable=True)
    op.alter_column('flagged_bookings', 'reason',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('flagged_bookings', 'provider_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('flagged_bookings', 'booking_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.add_column('bookings', sa.Column('service_details', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_index(op.f('ix_bookings_booking_id'), 'bookings', ['booking_id'], unique=False)
    op.alter_column('bookings', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('bookings', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('bookings', 'provider_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('bookings', 'status')
    op.create_table('flagged_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flagged_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flagged_by'], ['users.user_id'], name=op.f('flagged_transactions_flagged_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('flagged_transactions_pkey'))
    )
    op.create_index(op.f('ix_flagged_transactions_id'), 'flagged_transactions', ['id'], unique=False)
    op.create_table('analytics_view',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('time_bucket', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_view_pkey'))
    )
    op.create_index(op.f('ix_analytics_view_id'), 'analytics_view', ['id'], unique=False)
    # ### end Alembic commands ###
