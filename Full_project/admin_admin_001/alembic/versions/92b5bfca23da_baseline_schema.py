"""baseline schema

Revision ID: 92b5bfca23da
Revises: 
Create Date: 2025-10-03 16:58:55.012361

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '92b5bfca23da'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bookings',
    sa.Column('booking_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('provider_id', sa.Integer(), nullable=True),
    sa.Column('service_details', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ),
    sa.PrimaryKeyConstraint('booking_id')
    )
    op.create_index(op.f('ix_bookings_booking_id'), 'bookings', ['booking_id'], unique=False)
    op.create_table('flagged_bookings',
    sa.Column('id', sa.Integer(), nullable=True),
    sa.Column('booking_id', sa.Integer(), nullable=True),
    sa.Column('provider_id', sa.Integer(), nullable=True),
    sa.Column('reason', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'reviewed', 'resolved', name='flagstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.booking_id'], ),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.provider_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_flagged_bookings_id'), 'flagged_bookings', ['id'], unique=False)
    op.drop_index(op.f('ix_analytics_view_id'), table_name='analytics_view')
    op.drop_table('analytics_view')
    op.drop_index(op.f('ix_flagged_transactions_id'), table_name='flagged_transactions')
    op.drop_table('flagged_transactions')
    op.add_column('providers', sa.Column('status', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('providers', 'status')
    op.create_table('flagged_transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flagged_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flagged_by'], ['users.user_id'], name=op.f('flagged_transactions_flagged_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('flagged_transactions_pkey'))
    )
    op.create_index(op.f('ix_flagged_transactions_id'), 'flagged_transactions', ['id'], unique=False)
    op.create_table('analytics_view',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('time_bucket', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('analytics_view_pkey'))
    )
    op.create_index(op.f('ix_analytics_view_id'), 'analytics_view', ['id'], unique=False)
    op.drop_index(op.f('ix_flagged_bookings_id'), table_name='flagged_bookings')
    op.drop_table('flagged_bookings')
    op.drop_index(op.f('ix_bookings_booking_id'), table_name='bookings')
    op.drop_table('bookings')
    # ### end Alembic commands ###
